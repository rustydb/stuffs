Names: Gavin Prentice (prent024) and Russell Bunch (bunc0035)

Our programs works as follows:

We use a linked list as our data structure. Each node holds three values: start, length, and next.
Start is the starting address of the memory block, length is the length of the memory block
and next is the pointer to the next memory block. The start of the next node is the sum of the previous nodes
start and length value.

When a node is freed, we simply delete the node. This leaves a gap where that node was in our memory pool.
When we next call mm_alloc it will check to see if the start + length of the node
currently being looked at equals the start of the next node. If it does not, then there is a gap.
If the new node (block of memory) can fit in the found gap, it is inserted. Otherwise we move on to
check for other gaps. If no gap can hold the block we will arrive at the end. If the end still can not
hold the block, then we throw an error that there is insufficient space.