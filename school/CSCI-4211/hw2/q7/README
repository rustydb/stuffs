There are four executable files, all are written in perl. They are known
to work on unix boxes, not tested on Windows.

The server may be started on any machine, by using "./tcp_server" and
"./tcp_server" and the same goes for the udp scripts.

The client needs to be redirected at the host of the machine that the
server is started on. When the server starts, it will display the IP
it is running on, this can be typed into the $host variable in either
client.

By default, it is already set to connect to apollo.

############
File Descriptions
############

tcp_server
	Simple TCP server setup in Perl. Featureless, besides being able to
receive a filestream from a client on the created socket. The script
creates 2 sockets. One connects to google, and allows me to see the IP
I am hosting at. Thus making it easier to connect a client, since we do
not need to moneky around and find the IP address.
	The stream is dumped into an output.TCP file. Socket is closed when
transfer is completed.

tcp_client
	Small TCP client script in Perl. Simply opens the 10MB text file I
created and sends it via stream to whichever machine it is directed at
after handshaking. Sends line by line of bytes from the source file to the
server.

udp_server
	Small UDP server, opens a port on the host and allows data to be
beamed at that address. Dumps any data received into an output.UDP file.
Shuts down once it receives a string with the value End.

udp_client
	Small UDP client, bombards port and host it is directed at with
gibberish packets. Sends an End string to signal the server to shutdown.



Bugs:
1) It seems that the client and server need to have the same left part
of the IP. For example, any machine in KH4250 can connect to the server
script if it is ran, on say, Apollo. Since both machines start with
"128.101.XX.XX." If on a different subnet at the U, such as 131.XX.XX.XX.
This will not connect.. regardless if on VPN. I have tried this at home and
it works with my 10.1.XX.XX network.

2) UDP server doesn't always receive the END string to shutdown. Therefore
sometimes the UDP server will stay up after transmission.

3) Couldn't figure out a nice way to send things over UDP using perl, since
UDP isn't really used for file transfer, and I realized this close to the dead-
line. Therefore it is sort of ugly and bombards the server with "0000" from an
input file that has 4 bytes per line. 