-- Russell Bunch Lab 2 4707 Fall 2014

-- Create Tables
CREATE TABLE STUDENT
(
    SID INTEGER DEFAULT 0 NOT NULL,
    SNAME VARCHAR(20) NOT NULL,
    SEX CHAR(1) NOT NULL,
    AGE INTEGER NOT NULL,
    YEAR INTEGER NOT NULL,
    GPA DECIMAL(3,2) DEFAULT NULL,
    PRIMARY KEY (SID) ENABLE
);

CREATE TABLE DEPT
(
    DNAME VARCHAR(50) NOT NULL,
    NUMPHDS INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (DNAME) ENABLE
);

CREATE TABLE PROF
(
    PNAME VARCHAR(20) NOT NULL,
    DNAME VARCHAR(50) NOT NULL
);

CREATE TABLE COURSE
(
    CNO INTEGER NOT NULL,
    CNAME VARCHAR(50) NOT NULL,
    DNAME VARCHAR(50) NOT NULL,
    PRIMARY KEY (CNO, DNAME) ENABLE
);

CREATE TABLE MAJOR
(
    DNAME VARCHAR(50) NOT NULL,
    SID INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (DNAME, SID) ENABLE
);

CREATE TABLE SECTION
(
    DNAME VARCHAR(50) NOT NULL,
    CNO INTEGER NOT NULL,
    SECTNO INTEGER NOT NULL,
    PNAME VARCHAR(20) NOT NULL,
    PRIMARY KEY (DNAME, CNO, SECTNO) ENABLE
);

CREATE TABLE ENROLL
(
    SID INTEGER DEFAULT 0 NOT NULL,
    GRADE DECIMAL(3,2) DEFAULT NULL,
    DNAME VARCHAR(50) NOT NULL,
    CNO INTEGER NOT NULL,
    SECTNO INTEGER NOT NULL,
    PRIMARY KEY (SID, DNAME, CNO, SECTNO) ENABLE
);

-- Load data
@student.sql
@dept.sql
@prof.sql
@course.sql
@major.sql
@section.sql
@enroll.sql

--1
SELECT P.PNAME
FROM PROF P, DEPT D
WHERE D.NUMPHDS < 50
GROUP BY P.PNAME
ORDER BY P.PNAME;

--2
SELECT S.SNAME
FROM STUDENT S
WHERE GPA = (SELECT MIN(GPA) FROM STUDENT)
GROUP BY S.SNAME
ORDER BY S.SNAME;

--3
SELECT E.CNO, E.SECTNO, AVG(E.GRADE) AS AVG_GPA
FROM ENROLL E
WHERE E.DNAME='Computer Sciences'
GROUP BY (E.CNO, E.SECTNO)
ORDER BY E.CNO;

--4
SELECT C.CNAME, C.CNO, E.SECTNO, E.TOTAL AS STUDENTCOUNT
FROM COURSE C
INNER JOIN
(
    SELECT DNAME, CNO, COUNT(*) AS TOTAL, SECTNO
    FROM ENROLL
    GROUP BY (DNAME, CNO, SECTNO)
    HAVING COUNT (*) < 6
)
E ON E.CNO = C.CNO;

--5
SELECT S.SNAME, S.SID
FROM STUDENT S
JOIN ENROLL E ON E.SID = S.SID
GROUP BY S.SNAME, S.SID
HAVING COUNT (*) =
(
    SELECT MAX(NUMCLASS)
    FROM
    (
        SELECT COUNT (*) AS NUMCLASS
        FROM ENROLL E2
        GROUP BY E2.SID
    )
)
ORDER BY S.SNAME;

--6
SELECT M.DNAME
FROM MAJOR M
JOIN
(
    SELECT *
    FROM STUDENT S
    WHERE S.AGE < 18
)
S ON S.SID = M.SID
ORDER BY M.DNAME;

--7
SELECT S.SNAME, E.DNAME
FROM STUDENT S
JOIN
(
    SELECT E.SID, E.DNAME
    FROM ENROLL E
    JOIN
    (
        SELECT C.CNO
        FROM COURSE C
        WHERE C.CNAME LIKE 'College Geometry%'
    )
    C ON C.CNO = E.CNO
)
E ON E.SID = S.SID
GROUP BY S.SNAME, E.DNAME
ORDER BY S.SNAME;

--8
SELECT D.DNAME, D.NUMPHDS
FROM DEPT D
JOIN
(
    SELECT E.DNAME
    FROM ENROLL E
    JOIN
    (
        SELECT C.CNO
        FROM COURSE C
        WHERE C.CNAME NOT LIKE 'College Geometry%'
    )
    C ON C.CNO = E.CNO
)
E ON E.DNAME = D.DNAME
GROUP BY D.DNAME,D.NUMPHDS
ORDER BY D.DNAME;

--9
SELECT S.SNAME
FROM STUDENT S
WHERE S.SID IN
(
    SELECT E.SID
    FROM ENROLL E
    WHERE E.DNAME = 'Computer Sciences'
)
AND S.SID IN
(
    SELECT E2.SID
    FROM ENROLL E2
    WHERE E2.DNAME = 'Mathematics'
)
ORDER BY S.SNAME;

--10
SELECT MAX1 - MIN1 AS AGE_DIFF
FROM
(
    SELECT MIN(S.AGE) AS MIN1, MAX(S.AGE) AS MAX1
    FROM STUDENT S
);

--11
SELECT M.DNAME, AVG(S.GPA) AS AVGGPA
FROM MAJOR M
JOIN
(
    SELECT *
    FROM STUDENT S
    WHERE S.GPA < 1.0
)
S ON S.SID = M.SID
GROUP BY M.DNAME;

--12
SELECT S.SID, S.SNAME, S.GPA
FROM STUDENT S
JOIN
(
    SELECT E2.SID
    FROM ENROLL E2
    JOIN
    (
        SELECT C2.CNO
        FROM COURSE C2
        WHERE C2.DNAME = 'Civil Engineering'
        GROUP BY C2.CNO
    )
    C ON C.CNO = E2.CNO
    GROUP BY E2.SID
    HAVING COUNT (DISTINCT C.CNO) = 3
)
E ON E.SID = S.SID
GROUP BY S.SID, S.SNAME, S.GPA
ORDER BY S.SID;
